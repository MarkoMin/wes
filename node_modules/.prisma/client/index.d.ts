import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
  Sql,
  Decimal,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }
export { Decimal }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw, Sql }

/**
 * Prisma Client JS version: 2.10.2
 * Query Engine version: 7d0087eadc7265e12d4b8d8c3516b02c4c965111
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'findFirst'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Companies
 * const companies = await prisma.company.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Companies
   * const companies = await prisma.company.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<T>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): companyDelegate;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): usersDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const CompanyDistinctFieldEnum: {
  id: 'id',
  name: 'name'
};

export declare type CompanyDistinctFieldEnum = (typeof CompanyDistinctFieldEnum)[keyof typeof CompanyDistinctFieldEnum]


export declare const UsersDistinctFieldEnum: {
  id: 'id',
  username: 'username',
  hashed_password: 'hashed_password',
  email: 'email',
  photourl: 'photourl',
  is_active: 'is_active',
  token: 'token',
  token_created_at: 'token_created_at',
  company_id: 'company_id',
  user_role: 'user_role'
};

export declare type UsersDistinctFieldEnum = (typeof UsersDistinctFieldEnum)[keyof typeof UsersDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export declare const roles: {
  User: 'User',
  Renter: 'Renter',
  Moderator: 'Moderator',
  Administrator: 'Administrator'
};

export declare type roles = (typeof roles)[keyof typeof roles]


export declare const QueryMode: {
  default: 'default',
  insensitive: 'insensitive'
};

export declare type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]



/**
 * Model company
 */

export type company = {
  id: number
  name: string
}


export type AggregateCompany = {
  count: number
  avg: CompanyAvgAggregateOutputType | null
  sum: CompanySumAggregateOutputType | null
  min: CompanyMinAggregateOutputType | null
  max: CompanyMaxAggregateOutputType | null
}

export type CompanyAvgAggregateOutputType = {
  id: number
}

export type CompanySumAggregateOutputType = {
  id: number
}

export type CompanyMinAggregateOutputType = {
  id: number
}

export type CompanyMaxAggregateOutputType = {
  id: number
}


export type CompanyAvgAggregateInputType = {
  id?: true
}

export type CompanySumAggregateInputType = {
  id?: true
}

export type CompanyMinAggregateInputType = {
  id?: true
}

export type CompanyMaxAggregateInputType = {
  id?: true
}

export type AggregateCompanyArgs = {
  where?: companyWhereInput
  orderBy?: Enumerable<companyOrderByInput> | companyOrderByInput
  cursor?: companyWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<CompanyDistinctFieldEnum>
  count?: true
  avg?: CompanyAvgAggregateInputType
  sum?: CompanySumAggregateInputType
  min?: CompanyMinAggregateInputType
  max?: CompanyMaxAggregateInputType
}

export type GetCompanyAggregateType<T extends AggregateCompanyArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetCompanyAggregateScalarType<T[P]>
}

export type GetCompanyAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof CompanyAvgAggregateOutputType ? CompanyAvgAggregateOutputType[P] : never
}
    
    

export type companySelect = {
  id?: boolean
  name?: boolean
  users?: boolean | FindManyusersArgs
}

export type companyInclude = {
  users?: boolean | FindManyusersArgs
}

export type companyGetPayload<
  S extends boolean | null | undefined | companyArgs,
  U = keyof S
> = S extends true
  ? company
  : S extends undefined
  ? never
  : S extends companyArgs | FindManycompanyArgs
  ? 'include' extends U
    ? company  & {
      [P in TrueKeys<S['include']>]:
      P extends 'users'
      ? Array<usersGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof company ? company[P]
: 
      P extends 'users'
      ? Array<usersGetPayload<S['select'][P]>> : never
    }
  : company
: company


export interface companyDelegate {
  /**
   * Find zero or one Company that matches the filter.
   * @param {FindOnecompanyArgs} args - Arguments to find a Company
   * @example
   * // Get one Company
   * const company = await prisma.company.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOnecompanyArgs>(
    args: Subset<T, FindOnecompanyArgs>
  ): CheckSelect<T, Prisma__companyClient<company | null>, Prisma__companyClient<companyGetPayload<T> | null>>
  /**
   * Find the first Company that matches the filter.
   * @param {FindFirstcompanyArgs} args - Arguments to find a Company
   * @example
   * // Get one Company
   * const company = await prisma.company.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstcompanyArgs>(
    args?: Subset<T, FindFirstcompanyArgs>
  ): CheckSelect<T, Prisma__companyClient<company | null>, Prisma__companyClient<companyGetPayload<T> | null>>
  /**
   * Find zero or more Companies that matches the filter.
   * @param {FindManycompanyArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Companies
   * const companies = await prisma.company.findMany()
   * 
   * // Get first 10 Companies
   * const companies = await prisma.company.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManycompanyArgs>(
    args?: Subset<T, FindManycompanyArgs>
  ): CheckSelect<T, Promise<Array<company>>, Promise<Array<companyGetPayload<T>>>>
  /**
   * Create a Company.
   * @param {companyCreateArgs} args - Arguments to create a Company.
   * @example
   * // Create one Company
   * const Company = await prisma.company.create({
   *   data: {
   *     // ... data to create a Company
   *   }
   * })
   * 
  **/
  create<T extends companyCreateArgs>(
    args: Subset<T, companyCreateArgs>
  ): CheckSelect<T, Prisma__companyClient<company>, Prisma__companyClient<companyGetPayload<T>>>
  /**
   * Delete a Company.
   * @param {companyDeleteArgs} args - Arguments to delete one Company.
   * @example
   * // Delete one Company
   * const Company = await prisma.company.delete({
   *   where: {
   *     // ... filter to delete one Company
   *   }
   * })
   * 
  **/
  delete<T extends companyDeleteArgs>(
    args: Subset<T, companyDeleteArgs>
  ): CheckSelect<T, Prisma__companyClient<company>, Prisma__companyClient<companyGetPayload<T>>>
  /**
   * Update one Company.
   * @param {companyUpdateArgs} args - Arguments to update one Company.
   * @example
   * // Update one Company
   * const company = await prisma.company.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends companyUpdateArgs>(
    args: Subset<T, companyUpdateArgs>
  ): CheckSelect<T, Prisma__companyClient<company>, Prisma__companyClient<companyGetPayload<T>>>
  /**
   * Delete zero or more Companies.
   * @param {companyDeleteManyArgs} args - Arguments to filter Companies to delete.
   * @example
   * // Delete a few Companies
   * const { count } = await prisma.company.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends companyDeleteManyArgs>(
    args: Subset<T, companyDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Companies.
   * @param {companyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Companies
   * const company = await prisma.company.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends companyUpdateManyArgs>(
    args: Subset<T, companyUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Company.
   * @param {companyUpsertArgs} args - Arguments to update or create a Company.
   * @example
   * // Update or create a Company
   * const company = await prisma.company.upsert({
   *   create: {
   *     // ... data to create a Company
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Company we want to update
   *   }
   * })
  **/
  upsert<T extends companyUpsertArgs>(
    args: Subset<T, companyUpsertArgs>
  ): CheckSelect<T, Prisma__companyClient<company>, Prisma__companyClient<companyGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManycompanyArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateCompanyArgs>(args: Subset<T, AggregateCompanyArgs>): Promise<GetCompanyAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for company.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__companyClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  users<T extends FindManyusersArgs = {}>(args?: Subset<T, FindManyusersArgs>): CheckSelect<T, Promise<Array<users>>, Promise<Array<usersGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * company findOne
 */
export type FindOnecompanyArgs = {
  /**
   * Select specific fields to fetch from the company
  **/
  select?: companySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: companyInclude | null
  /**
   * Filter, which company to fetch.
  **/
  where: companyWhereUniqueInput
}


/**
 * company findFirst
 */
export type FindFirstcompanyArgs = {
  /**
   * Select specific fields to fetch from the company
  **/
  select?: companySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: companyInclude | null
  /**
   * Filter, which company to fetch.
  **/
  where?: companyWhereInput
  orderBy?: Enumerable<companyOrderByInput> | companyOrderByInput
  cursor?: companyWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<CompanyDistinctFieldEnum>
}


/**
 * company findMany
 */
export type FindManycompanyArgs = {
  /**
   * Select specific fields to fetch from the company
  **/
  select?: companySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: companyInclude | null
  /**
   * Filter, which companies to fetch.
  **/
  where?: companyWhereInput
  /**
   * Determine the order of the companies to fetch.
  **/
  orderBy?: Enumerable<companyOrderByInput> | companyOrderByInput
  /**
   * Sets the position for listing companies.
  **/
  cursor?: companyWhereUniqueInput
  /**
   * The number of companies to fetch. If negative number, it will take companies before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` companies.
  **/
  skip?: number
  distinct?: Enumerable<CompanyDistinctFieldEnum>
}


/**
 * company create
 */
export type companyCreateArgs = {
  /**
   * Select specific fields to fetch from the company
  **/
  select?: companySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: companyInclude | null
  /**
   * The data needed to create a company.
  **/
  data: companyCreateInput
}


/**
 * company update
 */
export type companyUpdateArgs = {
  /**
   * Select specific fields to fetch from the company
  **/
  select?: companySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: companyInclude | null
  /**
   * The data needed to update a company.
  **/
  data: companyUpdateInput
  /**
   * Choose, which company to update.
  **/
  where: companyWhereUniqueInput
}


/**
 * company updateMany
 */
export type companyUpdateManyArgs = {
  data: companyUpdateManyMutationInput
  where?: companyWhereInput
}


/**
 * company upsert
 */
export type companyUpsertArgs = {
  /**
   * Select specific fields to fetch from the company
  **/
  select?: companySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: companyInclude | null
  /**
   * The filter to search for the company to update in case it exists.
  **/
  where: companyWhereUniqueInput
  /**
   * In case the company found by the `where` argument doesn't exist, create a new company with this data.
  **/
  create: companyCreateInput
  /**
   * In case the company was found with the provided `where` argument, update it with this data.
  **/
  update: companyUpdateInput
}


/**
 * company delete
 */
export type companyDeleteArgs = {
  /**
   * Select specific fields to fetch from the company
  **/
  select?: companySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: companyInclude | null
  /**
   * Filter which company to delete.
  **/
  where: companyWhereUniqueInput
}


/**
 * company deleteMany
 */
export type companyDeleteManyArgs = {
  where?: companyWhereInput
}


/**
 * company without action
 */
export type companyArgs = {
  /**
   * Select specific fields to fetch from the company
  **/
  select?: companySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: companyInclude | null
}



/**
 * Model users
 */

export type users = {
  id: number
  username: string
  hashed_password: string
  email: string
  photourl: string | null
  is_active: boolean
  token: string
  token_created_at: Date | null
  company_id: number | null
  user_role: roles
}


export type AggregateUsers = {
  count: number
  avg: UsersAvgAggregateOutputType | null
  sum: UsersSumAggregateOutputType | null
  min: UsersMinAggregateOutputType | null
  max: UsersMaxAggregateOutputType | null
}

export type UsersAvgAggregateOutputType = {
  id: number
  company_id: number | null
}

export type UsersSumAggregateOutputType = {
  id: number
  company_id: number | null
}

export type UsersMinAggregateOutputType = {
  id: number
  company_id: number | null
}

export type UsersMaxAggregateOutputType = {
  id: number
  company_id: number | null
}


export type UsersAvgAggregateInputType = {
  id?: true
  company_id?: true
}

export type UsersSumAggregateInputType = {
  id?: true
  company_id?: true
}

export type UsersMinAggregateInputType = {
  id?: true
  company_id?: true
}

export type UsersMaxAggregateInputType = {
  id?: true
  company_id?: true
}

export type AggregateUsersArgs = {
  where?: usersWhereInput
  orderBy?: Enumerable<usersOrderByInput> | usersOrderByInput
  cursor?: usersWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UsersDistinctFieldEnum>
  count?: true
  avg?: UsersAvgAggregateInputType
  sum?: UsersSumAggregateInputType
  min?: UsersMinAggregateInputType
  max?: UsersMaxAggregateInputType
}

export type GetUsersAggregateType<T extends AggregateUsersArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetUsersAggregateScalarType<T[P]>
}

export type GetUsersAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof UsersAvgAggregateOutputType ? UsersAvgAggregateOutputType[P] : never
}
    
    

export type usersSelect = {
  id?: boolean
  username?: boolean
  hashed_password?: boolean
  email?: boolean
  photourl?: boolean
  is_active?: boolean
  token?: boolean
  token_created_at?: boolean
  company_id?: boolean
  user_role?: boolean
  company?: boolean | companyArgs
}

export type usersInclude = {
  company?: boolean | companyArgs
}

export type usersGetPayload<
  S extends boolean | null | undefined | usersArgs,
  U = keyof S
> = S extends true
  ? users
  : S extends undefined
  ? never
  : S extends usersArgs | FindManyusersArgs
  ? 'include' extends U
    ? users  & {
      [P in TrueKeys<S['include']>]:
      P extends 'company'
      ? companyGetPayload<S['include'][P]> | null : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof users ? users[P]
: 
      P extends 'company'
      ? companyGetPayload<S['select'][P]> | null : never
    }
  : users
: users


export interface usersDelegate {
  /**
   * Find zero or one Users that matches the filter.
   * @param {FindOneusersArgs} args - Arguments to find a Users
   * @example
   * // Get one Users
   * const users = await prisma.users.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneusersArgs>(
    args: Subset<T, FindOneusersArgs>
  ): CheckSelect<T, Prisma__usersClient<users | null>, Prisma__usersClient<usersGetPayload<T> | null>>
  /**
   * Find the first Users that matches the filter.
   * @param {FindFirstusersArgs} args - Arguments to find a Users
   * @example
   * // Get one Users
   * const users = await prisma.users.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstusersArgs>(
    args?: Subset<T, FindFirstusersArgs>
  ): CheckSelect<T, Prisma__usersClient<users | null>, Prisma__usersClient<usersGetPayload<T> | null>>
  /**
   * Find zero or more Users that matches the filter.
   * @param {FindManyusersArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.users.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.users.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyusersArgs>(
    args?: Subset<T, FindManyusersArgs>
  ): CheckSelect<T, Promise<Array<users>>, Promise<Array<usersGetPayload<T>>>>
  /**
   * Create a Users.
   * @param {usersCreateArgs} args - Arguments to create a Users.
   * @example
   * // Create one Users
   * const Users = await prisma.users.create({
   *   data: {
   *     // ... data to create a Users
   *   }
   * })
   * 
  **/
  create<T extends usersCreateArgs>(
    args: Subset<T, usersCreateArgs>
  ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>
  /**
   * Delete a Users.
   * @param {usersDeleteArgs} args - Arguments to delete one Users.
   * @example
   * // Delete one Users
   * const Users = await prisma.users.delete({
   *   where: {
   *     // ... filter to delete one Users
   *   }
   * })
   * 
  **/
  delete<T extends usersDeleteArgs>(
    args: Subset<T, usersDeleteArgs>
  ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>
  /**
   * Update one Users.
   * @param {usersUpdateArgs} args - Arguments to update one Users.
   * @example
   * // Update one Users
   * const users = await prisma.users.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends usersUpdateArgs>(
    args: Subset<T, usersUpdateArgs>
  ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>
  /**
   * Delete zero or more Users.
   * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.users.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends usersDeleteManyArgs>(
    args: Subset<T, usersDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Users.
   * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const users = await prisma.users.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends usersUpdateManyArgs>(
    args: Subset<T, usersUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Users.
   * @param {usersUpsertArgs} args - Arguments to update or create a Users.
   * @example
   * // Update or create a Users
   * const users = await prisma.users.upsert({
   *   create: {
   *     // ... data to create a Users
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Users we want to update
   *   }
   * })
  **/
  upsert<T extends usersUpsertArgs>(
    args: Subset<T, usersUpsertArgs>
  ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyusersArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateUsersArgs>(args: Subset<T, AggregateUsersArgs>): Promise<GetUsersAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for users.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__usersClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  company<T extends companyArgs = {}>(args?: Subset<T, companyArgs>): CheckSelect<T, Prisma__companyClient<company | null>, Prisma__companyClient<companyGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * users findOne
 */
export type FindOneusersArgs = {
  /**
   * Select specific fields to fetch from the users
  **/
  select?: usersSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: usersInclude | null
  /**
   * Filter, which users to fetch.
  **/
  where: usersWhereUniqueInput
}


/**
 * users findFirst
 */
export type FindFirstusersArgs = {
  /**
   * Select specific fields to fetch from the users
  **/
  select?: usersSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: usersInclude | null
  /**
   * Filter, which users to fetch.
  **/
  where?: usersWhereInput
  orderBy?: Enumerable<usersOrderByInput> | usersOrderByInput
  cursor?: usersWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UsersDistinctFieldEnum>
}


/**
 * users findMany
 */
export type FindManyusersArgs = {
  /**
   * Select specific fields to fetch from the users
  **/
  select?: usersSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: usersInclude | null
  /**
   * Filter, which users to fetch.
  **/
  where?: usersWhereInput
  /**
   * Determine the order of the users to fetch.
  **/
  orderBy?: Enumerable<usersOrderByInput> | usersOrderByInput
  /**
   * Sets the position for listing users.
  **/
  cursor?: usersWhereUniqueInput
  /**
   * The number of users to fetch. If negative number, it will take users before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` users.
  **/
  skip?: number
  distinct?: Enumerable<UsersDistinctFieldEnum>
}


/**
 * users create
 */
export type usersCreateArgs = {
  /**
   * Select specific fields to fetch from the users
  **/
  select?: usersSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: usersInclude | null
  /**
   * The data needed to create a users.
  **/
  data: usersCreateInput
}


/**
 * users update
 */
export type usersUpdateArgs = {
  /**
   * Select specific fields to fetch from the users
  **/
  select?: usersSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: usersInclude | null
  /**
   * The data needed to update a users.
  **/
  data: usersUpdateInput
  /**
   * Choose, which users to update.
  **/
  where: usersWhereUniqueInput
}


/**
 * users updateMany
 */
export type usersUpdateManyArgs = {
  data: usersUpdateManyMutationInput
  where?: usersWhereInput
}


/**
 * users upsert
 */
export type usersUpsertArgs = {
  /**
   * Select specific fields to fetch from the users
  **/
  select?: usersSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: usersInclude | null
  /**
   * The filter to search for the users to update in case it exists.
  **/
  where: usersWhereUniqueInput
  /**
   * In case the users found by the `where` argument doesn't exist, create a new users with this data.
  **/
  create: usersCreateInput
  /**
   * In case the users was found with the provided `where` argument, update it with this data.
  **/
  update: usersUpdateInput
}


/**
 * users delete
 */
export type usersDeleteArgs = {
  /**
   * Select specific fields to fetch from the users
  **/
  select?: usersSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: usersInclude | null
  /**
   * Filter which users to delete.
  **/
  where: usersWhereUniqueInput
}


/**
 * users deleteMany
 */
export type usersDeleteManyArgs = {
  where?: usersWhereInput
}


/**
 * users without action
 */
export type usersArgs = {
  /**
   * Select specific fields to fetch from the users
  **/
  select?: usersSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: usersInclude | null
}



/**
 * Deep Input Types
 */


export type companyWhereInput = {
  AND?: companyWhereInput | Enumerable<companyWhereInput>
  OR?: companyWhereInput | Enumerable<companyWhereInput>
  NOT?: companyWhereInput | Enumerable<companyWhereInput>
  id?: IntFilter | number
  name?: StringFilter | string
  users?: UsersListRelationFilter
}

export type companyOrderByInput = {
  id?: SortOrder
  name?: SortOrder
}

export type companyWhereUniqueInput = {
  id?: number
  name?: string
}

export type usersWhereInput = {
  AND?: usersWhereInput | Enumerable<usersWhereInput>
  OR?: usersWhereInput | Enumerable<usersWhereInput>
  NOT?: usersWhereInput | Enumerable<usersWhereInput>
  id?: IntFilter | number
  username?: StringFilter | string
  hashed_password?: StringFilter | string
  email?: StringFilter | string
  photourl?: StringNullableFilter | string | null
  is_active?: BoolFilter | boolean
  token?: StringFilter | string
  token_created_at?: DateTimeNullableFilter | Date | string | null
  company_id?: IntNullableFilter | number | null
  user_role?: EnumrolesFilter | roles
  company?: CompanyRelationFilter | companyWhereInput | null
}

export type usersOrderByInput = {
  id?: SortOrder
  username?: SortOrder
  hashed_password?: SortOrder
  email?: SortOrder
  photourl?: SortOrder
  is_active?: SortOrder
  token?: SortOrder
  token_created_at?: SortOrder
  company_id?: SortOrder
  user_role?: SortOrder
}

export type usersWhereUniqueInput = {
  id?: number
  username?: string
  email?: string
  token?: string
}

export type companyCreateInput = {
  name: string
  users?: usersCreateManyWithoutCompanyInput
}

export type companyUpdateInput = {
  name?: string | StringFieldUpdateOperationsInput
  users?: usersUpdateManyWithoutCompanyInput
}

export type companyUpdateManyMutationInput = {
  name?: string | StringFieldUpdateOperationsInput
}

export type usersCreateInput = {
  username: string
  hashed_password: string
  email: string
  photourl?: string | null
  is_active: boolean
  token: string
  token_created_at?: Date | string | null
  user_role: roles
  company?: companyCreateOneWithoutUsersInput
}

export type usersUpdateInput = {
  username?: string | StringFieldUpdateOperationsInput
  hashed_password?: string | StringFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
  photourl?: string | NullableStringFieldUpdateOperationsInput | null
  is_active?: boolean | BoolFieldUpdateOperationsInput
  token?: string | StringFieldUpdateOperationsInput
  token_created_at?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  user_role?: roles | EnumrolesFieldUpdateOperationsInput
  company?: companyUpdateOneWithoutUsersInput
}

export type usersUpdateManyMutationInput = {
  username?: string | StringFieldUpdateOperationsInput
  hashed_password?: string | StringFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
  photourl?: string | NullableStringFieldUpdateOperationsInput | null
  is_active?: boolean | BoolFieldUpdateOperationsInput
  token?: string | StringFieldUpdateOperationsInput
  token_created_at?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  user_role?: roles | EnumrolesFieldUpdateOperationsInput
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: string | NestedStringFilter
}

export type UsersListRelationFilter = {
  every?: usersWhereInput
  some?: usersWhereInput
  none?: usersWhereInput
}

export type StringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: string | NestedStringNullableFilter | null
}

export type BoolFilter = {
  equals?: boolean
  not?: boolean | NestedBoolFilter
}

export type DateTimeNullableFilter = {
  equals?: Date | string | null
  in?: Enumerable<Date> | Enumerable<string> | null
  notIn?: Enumerable<Date> | Enumerable<string> | null
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeNullableFilter | null
}

export type IntNullableFilter = {
  equals?: number | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntNullableFilter | null
}

export type EnumrolesFilter = {
  equals?: roles
  in?: Enumerable<roles>
  notIn?: Enumerable<roles>
  not?: roles | NestedEnumrolesFilter
}

export type CompanyRelationFilter = {
  is?: companyWhereInput | null
  isNot?: companyWhereInput | null
}

export type usersCreateManyWithoutCompanyInput = {
  create?: usersCreateWithoutCompanyInput | Enumerable<usersCreateWithoutCompanyInput>
  connect?: usersWhereUniqueInput | Enumerable<usersWhereUniqueInput>
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type usersUpdateManyWithoutCompanyInput = {
  create?: usersCreateWithoutCompanyInput | Enumerable<usersCreateWithoutCompanyInput>
  connect?: usersWhereUniqueInput | Enumerable<usersWhereUniqueInput>
  set?: usersWhereUniqueInput | Enumerable<usersWhereUniqueInput>
  disconnect?: usersWhereUniqueInput | Enumerable<usersWhereUniqueInput>
  delete?: usersWhereUniqueInput | Enumerable<usersWhereUniqueInput>
  update?: usersUpdateWithWhereUniqueWithoutCompanyInput | Enumerable<usersUpdateWithWhereUniqueWithoutCompanyInput>
  updateMany?: usersUpdateManyWithWhereNestedInput | Enumerable<usersUpdateManyWithWhereNestedInput>
  deleteMany?: usersScalarWhereInput | Enumerable<usersScalarWhereInput>
  upsert?: usersUpsertWithWhereUniqueWithoutCompanyInput | Enumerable<usersUpsertWithWhereUniqueWithoutCompanyInput>
}

export type companyCreateOneWithoutUsersInput = {
  create?: companyCreateWithoutUsersInput
  connect?: companyWhereUniqueInput
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type EnumrolesFieldUpdateOperationsInput = {
  set?: roles
}

export type companyUpdateOneWithoutUsersInput = {
  create?: companyCreateWithoutUsersInput
  connect?: companyWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: companyUpdateWithoutUsersDataInput
  upsert?: companyUpsertWithoutUsersInput
}

export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type NestedStringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringNullableFilter | null
}

export type NestedBoolFilter = {
  equals?: boolean
  not?: boolean | NestedBoolFilter
}

export type NestedDateTimeNullableFilter = {
  equals?: Date | string | null
  in?: Enumerable<Date> | Enumerable<string> | null
  notIn?: Enumerable<Date> | Enumerable<string> | null
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeNullableFilter | null
}

export type NestedIntNullableFilter = {
  equals?: number | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntNullableFilter | null
}

export type NestedEnumrolesFilter = {
  equals?: roles
  in?: Enumerable<roles>
  notIn?: Enumerable<roles>
  not?: roles | NestedEnumrolesFilter
}

export type usersCreateWithoutCompanyInput = {
  username: string
  hashed_password: string
  email: string
  photourl?: string | null
  is_active: boolean
  token: string
  token_created_at?: Date | string | null
  user_role: roles
}

export type usersUpdateWithWhereUniqueWithoutCompanyInput = {
  where: usersWhereUniqueInput
  data: usersUpdateWithoutCompanyDataInput
}

export type usersUpdateManyWithWhereNestedInput = {
  where: usersScalarWhereInput
  data: usersUpdateManyDataInput
}

export type usersScalarWhereInput = {
  AND?: usersScalarWhereInput | Enumerable<usersScalarWhereInput>
  OR?: usersScalarWhereInput | Enumerable<usersScalarWhereInput>
  NOT?: usersScalarWhereInput | Enumerable<usersScalarWhereInput>
  id?: IntFilter | number
  username?: StringFilter | string
  hashed_password?: StringFilter | string
  email?: StringFilter | string
  photourl?: StringNullableFilter | string | null
  is_active?: BoolFilter | boolean
  token?: StringFilter | string
  token_created_at?: DateTimeNullableFilter | Date | string | null
  company_id?: IntNullableFilter | number | null
  user_role?: EnumrolesFilter | roles
}

export type usersUpsertWithWhereUniqueWithoutCompanyInput = {
  where: usersWhereUniqueInput
  update: usersUpdateWithoutCompanyDataInput
  create: usersCreateWithoutCompanyInput
}

export type companyCreateWithoutUsersInput = {
  name: string
}

export type companyUpdateWithoutUsersDataInput = {
  name?: string | StringFieldUpdateOperationsInput
}

export type companyUpsertWithoutUsersInput = {
  update: companyUpdateWithoutUsersDataInput
  create: companyCreateWithoutUsersInput
}

export type usersUpdateWithoutCompanyDataInput = {
  username?: string | StringFieldUpdateOperationsInput
  hashed_password?: string | StringFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
  photourl?: string | NullableStringFieldUpdateOperationsInput | null
  is_active?: boolean | BoolFieldUpdateOperationsInput
  token?: string | StringFieldUpdateOperationsInput
  token_created_at?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  user_role?: roles | EnumrolesFieldUpdateOperationsInput
}

export type usersUpdateManyDataInput = {
  username?: string | StringFieldUpdateOperationsInput
  hashed_password?: string | StringFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
  photourl?: string | NullableStringFieldUpdateOperationsInput | null
  is_active?: boolean | BoolFieldUpdateOperationsInput
  token?: string | StringFieldUpdateOperationsInput
  token_created_at?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  user_role?: roles | EnumrolesFieldUpdateOperationsInput
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
